{"version":3,"file":null,"sources":["../lib/utils.js","../lib/core.js","../lib/index.js"],"sourcesContent":["export function bind(obj, type, fn) {\n    obj.addEventListener(type, fn, false);\n}\nexport function unbind(obj, type, fn) {\n    obj.removeEventListener(type, fn, false);\n}\nexport function msEventType(type) {\n    let lo = type.toLowerCase();\n    let ms = 'MS' + type;\n    return window.navigator.msPointerEnabled ? ms : lo;\n}\nexport function getTimeStamp() {\n    return new Date().getTime();\n}\nexport function getPointerEvent(event) {\n    return event.targetTouches ? event.targetTouches[0] : event;\n}\n","import { msEventType, getPointerEvent } from \"./utils\";\nvar CustomSwipeEventSubType;\n(function (CustomSwipeEventSubType) {\n    CustomSwipeEventSubType[CustomSwipeEventSubType[\"SwipeStart\"] = 0] = \"SwipeStart\";\n    CustomSwipeEventSubType[CustomSwipeEventSubType[\"SwipeMove\"] = 1] = \"SwipeMove\";\n    CustomSwipeEventSubType[CustomSwipeEventSubType[\"SwipeEnd\"] = 2] = \"SwipeEnd\";\n})(CustomSwipeEventSubType || (CustomSwipeEventSubType = {}));\nexport var CustomSwipe;\n(function (CustomSwipe) {\n    let TARGET = null;\n    const touchEvents = {\n        touchstart: msEventType('PointerDown') + ' touchstart',\n        touchend: msEventType('PointerUp') + ' touchend',\n        touchmove: msEventType('PointerMove') + ' touchmove'\n    };\n    let isTouchEvent = false;\n    let currX;\n    let currY;\n    let cachedX;\n    let cachedY;\n    // We need these variables to get the final distance\n    let deltaX;\n    let deltaY;\n    function init(doc) {\n        //setting the events listeners\n        // we need to debounce the callbacks because some devices multiple events are triggered at same time\n        setListener(doc, touchEvents.touchstart + ' mousedown', onTouchStart);\n        setListener(doc, touchEvents.touchend + ' mouseup', onTouchEnd);\n        setListener(doc, touchEvents.touchmove + ' mousemove', onTouchMove);\n    }\n    CustomSwipe.init = init;\n    function setListener(elm, events, callback) {\n        let eventsArray = events.split(' ');\n        let i = eventsArray.length;\n        while (i--) {\n            elm.addEventListener(eventsArray[i], callback, false);\n        }\n    }\n    function onTouchStart(e) {\n        if (e.type !== 'mousedown')\n            isTouchEvent = true;\n        // skip this event we don't need to track it now\n        if (e.type === 'mousedown' && isTouchEvent) {\n            TARGET = null;\n            return;\n        }\n        let pointer = getPointerEvent(e);\n        // caching the current x\n        cachedX = currX = pointer.pageX;\n        // caching the current y\n        cachedY = currY = pointer.pageY;\n        TARGET = e.target;\n        sendEvent(TARGET, CustomSwipeEventSubType.SwipeStart, { x: 0, y: 0 });\n    }\n    function onTouchEnd(e) {\n        let eventName = null;\n        // skip the mouse events if previously a touch event was dispatched\n        // and reset the touch flag\n        if (e.type === 'mouseup' && isTouchEvent) {\n            isTouchEvent = false;\n            TARGET = null;\n            return;\n        }\n        deltaY = cachedY - currY;\n        deltaX = cachedX - currX;\n        sendEvent(TARGET, CustomSwipeEventSubType.SwipeEnd, { x: Math.abs(deltaX), y: Math.abs(deltaY) });\n        TARGET = null;\n    }\n    function onTouchMove(e) {\n        // skip the mouse move events if the touch events were previously detected\n        if (e.type === 'mousemove' && isTouchEvent)\n            return;\n        let pointer = getPointerEvent(e);\n        currX = pointer.pageX;\n        currY = pointer.pageY;\n        deltaY = cachedY - currY;\n        deltaX = cachedX - currX;\n        if (TARGET) {\n            sendEvent(TARGET, CustomSwipeEventSubType.SwipeMove, { x: Math.abs(deltaX), y: Math.abs(deltaY) });\n        }\n    }\n    function sendEvent(elm, type, distance) {\n        let data = {\n            x: currX,\n            y: currY,\n            distance: distance,\n            swipeEventSubType: type\n        };\n        let customEvent = window.document.createEvent('Event');\n        // addEventListener\n        if (customEvent.initEvent) {\n            for (let key in data) {\n                customEvent[key] = data[key];\n            }\n            customEvent.initEvent('swipe', true, true);\n            elm.dispatchEvent(customEvent);\n        }\n        // detect all the inline events\n        // also on the parent nodes\n        /*while (elm) {\n          // inline\n          if (elm['on' + eventName]) elm['on' + eventName](customEvent);\n          elm = elm.parentNode\n        }*/\n    }\n})(CustomSwipe || (CustomSwipe = {}));\n","import { CustomSwipe } from \"./core\";\nexport default (function (doc) {\n    CustomSwipe.init(doc);\n}(window.document));\n"],"names":["msEventType","type","lo","toLowerCase","ms","window","navigator","msPointerEnabled","getPointerEvent","event","targetTouches","CustomSwipeEventSubType","CustomSwipe","TARGET","touchEvents","isTouchEvent","currX","currY","cachedX","cachedY","deltaX","deltaY","init","doc","touchstart","onTouchStart","touchend","onTouchEnd","touchmove","onTouchMove","setListener","elm","events","callback","eventsArray","split","i","length","addEventListener","e","pointer","pageX","pageY","target","SwipeStart","x","y","eventName","SwipeEnd","Math","abs","SwipeMove","sendEvent","distance","data","customEvent","document","createEvent","initEvent","key","dispatchEvent"],"mappings":"AAMO,SAASA,WAAT,CAAqBC,IAArB,EAA2B;QAC1BC,KAAKD,KAAKE,WAAL,EAAT;QACIC,KAAK,OAAOH,IAAhB;WACOI,OAAOC,SAAP,CAAiBC,gBAAjB,GAAoCH,EAApC,GAAyCF,EAAhD;;AAEJ,AAAO;AAGP,AAAO,SAASM,eAAT,CAAyBC,KAAzB,EAAgC;WAC5BA,MAAMC,aAAN,GAAsBD,MAAMC,aAAN,CAAoB,CAApB,CAAtB,GAA+CD,KAAtD;;;ACdJ,IAAIE,uBAAJ;AACA,CAAC,UAAUA,uBAAV,EAAmC;4BACRA,wBAAwB,YAAxB,IAAwC,CAAhE,IAAqE,YAArE;4BACwBA,wBAAwB,WAAxB,IAAuC,CAA/D,IAAoE,WAApE;4BACwBA,wBAAwB,UAAxB,IAAsC,CAA9D,IAAmE,UAAnE;CAHJ,EAIGA,4BAA4BA,0BAA0B,EAAtD,CAJH;AAKA,AAAO,IAAIC,WAAJ;AACP,CAAC,UAAUA,WAAV,EAAuB;QAChBC,SAAS,IAAb;QACMC,cAAc;oBACJd,YAAY,aAAZ,IAA6B,aADzB;kBAENA,YAAY,WAAZ,IAA2B,WAFrB;mBAGLA,YAAY,aAAZ,IAA6B;KAH5C;QAKIe,eAAe,KAAnB;QACIC,cAAJ;QACIC,cAAJ;QACIC,gBAAJ;QACIC,gBAAJ;;QAEIC,eAAJ;QACIC,eAAJ;aACSC,IAAT,CAAcC,GAAd,EAAmB;;;oBAGHA,GAAZ,EAAiBT,YAAYU,UAAZ,GAAyB,YAA1C,EAAwDC,YAAxD;oBACYF,GAAZ,EAAiBT,YAAYY,QAAZ,GAAuB,UAAxC,EAAoDC,UAApD;oBACYJ,GAAZ,EAAiBT,YAAYc,SAAZ,GAAwB,YAAzC,EAAuDC,WAAvD;;gBAEQP,IAAZ,GAAmBA,IAAnB;aACSQ,WAAT,CAAqBC,GAArB,EAA0BC,MAA1B,EAAkCC,QAAlC,EAA4C;YACpCC,cAAcF,OAAOG,KAAP,CAAa,GAAb,CAAlB;YACIC,IAAIF,YAAYG,MAApB;eACOD,GAAP,EAAY;gBACJE,gBAAJ,CAAqBJ,YAAYE,CAAZ,CAArB,EAAqCH,QAArC,EAA+C,KAA/C;;;aAGCR,YAAT,CAAsBc,CAAtB,EAAyB;YACjBA,EAAEtC,IAAF,KAAW,WAAf,EACIc,eAAe,IAAf;;YAEAwB,EAAEtC,IAAF,KAAW,WAAX,IAA0Bc,YAA9B,EAA4C;qBAC/B,IAAT;;;YAGAyB,UAAUhC,gBAAgB+B,CAAhB,CAAd;;kBAEUvB,QAAQwB,QAAQC,KAA1B;;kBAEUxB,QAAQuB,QAAQE,KAA1B;iBACSH,EAAEI,MAAX;kBACU9B,MAAV,EAAkBF,wBAAwBiC,UAA1C,EAAsD,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAtD;;aAEKnB,UAAT,CAAoBY,CAApB,EAAuB;YACfQ,YAAY,IAAhB;;;YAGIR,EAAEtC,IAAF,KAAW,SAAX,IAAwBc,YAA5B,EAA0C;2BACvB,KAAf;qBACS,IAAT;;;iBAGKI,UAAUF,KAAnB;iBACSC,UAAUF,KAAnB;kBACUH,MAAV,EAAkBF,wBAAwBqC,QAA1C,EAAoD,EAAEH,GAAGI,KAAKC,GAAL,CAAS9B,MAAT,CAAL,EAAuB0B,GAAGG,KAAKC,GAAL,CAAS7B,MAAT,CAA1B,EAApD;iBACS,IAAT;;aAEKQ,WAAT,CAAqBU,CAArB,EAAwB;;YAEhBA,EAAEtC,IAAF,KAAW,WAAX,IAA0Bc,YAA9B,EACI;YACAyB,UAAUhC,gBAAgB+B,CAAhB,CAAd;gBACQC,QAAQC,KAAhB;gBACQD,QAAQE,KAAhB;iBACSvB,UAAUF,KAAnB;iBACSC,UAAUF,KAAnB;YACIH,MAAJ,EAAY;sBACEA,MAAV,EAAkBF,wBAAwBwC,SAA1C,EAAqD,EAAEN,GAAGI,KAAKC,GAAL,CAAS9B,MAAT,CAAL,EAAuB0B,GAAGG,KAAKC,GAAL,CAAS7B,MAAT,CAA1B,EAArD;;;aAGC+B,SAAT,CAAmBrB,GAAnB,EAAwB9B,IAAxB,EAA8BoD,QAA9B,EAAwC;YAChCC,OAAO;eACJtC,KADI;eAEJC,KAFI;sBAGGoC,QAHH;+BAIYpD;SAJvB;YAMIsD,cAAclD,OAAOmD,QAAP,CAAgBC,WAAhB,CAA4B,OAA5B,CAAlB;;YAEIF,YAAYG,SAAhB,EAA2B;iBAClB,IAAIC,GAAT,IAAgBL,IAAhB,EAAsB;4BACNK,GAAZ,IAAmBL,KAAKK,GAAL,CAAnB;;wBAEQD,SAAZ,CAAsB,OAAtB,EAA+B,IAA/B,EAAqC,IAArC;gBACIE,aAAJ,CAAkBL,WAAlB;;;;;;;;;;CAvFZ,EAiGG3C,gBAAgBA,cAAc,EAA9B,CAjGH;;ACPA,YAAgB,WAAUW,GAAV,EAAe;gBACfD,IAAZ,CAAiBC,GAAjB;CADY,EAEdlB,OAAOmD,QAFO,CAAhB;;"}